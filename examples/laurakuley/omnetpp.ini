# TODO: gPTP clock and IP extension

[General]
network = LauraKuleyShowcase
sim-time-limit = 1s
record-eventlog = true

# disable TCP/UDP/IP protocols, they are not used
*.*.hasTcp = false
*.*.hasUdp = false
*.*.hasIpv4 = false

# configure all Ethernet interfaces to have 1 Gbps datarate
*.*.eth[*].bitrate = 1Gbps

# manually configure MAC forwarding tables for multicast
*.switch1.macTable.forwardingTable = [{address: "01:00:00:00:00:00", vlan: 1, interface: "eth3"}]
*.switch2.macTable.forwardingTable = [{address: "01:00:00:00:00:00", vlan: 1, interface: "eth1"},
                                      {address: "01:00:00:00:00:00", vlan: 1, interface: "eth2"}]

# alternative to manual configuration is to automatically configure MAC forwarding tables for multicast
#*.macForwardingTableConfigurator.configuration = [{name: "S1", source: "device1", destination: "device5 or device6", vlanId: "1", destinationAddress: "01:00:00:00:00:00"}]

# TODO: is there an easier way?
*.device*.eth[0].typename = "LayeredEthernetInterface"
*.device*.eth[0].phyLayer.typename = "EthernetStreamingPhyLayer"
*.switch*.bridging.typename = "BridgingLayer"

# enable Ethernet socket support in device5 and device6 where multicast frames are received
*.device5.ethernet.hasSocketSupport = true
*.device6.ethernet.hasSocketSupport = true

# replace default Ethernet protocol with the modular one
*.*.ethernet.typename = "EthernetLayer"

# enable 802.1q protocol
*.*.ieee8021q.typename = "Ieee8021qProtocol"

# configure Ethernet source applications
*.device1.numApps = 1
*.device1.app[0].typename = "EthernetSourceApp"
*.device1.app[0].io.interface = "eth0"
*.device1.app[0].io.remoteAddress = "01:00:00:00:00:00"
*.device1.app[0].tagger.typename = "PacketTagger"
*.device1.app[0].tagger.vlanId = 1
*.device1.app[0].tagger.pcp = 1
*.device1.app[0].source.packetLength = 1200B
*.device1.app[0].source.initialProductionOffset = exponential(50us)
*.device1.app[0].source.productionInterval = exponential(50us)

# configure Ethernet sink applications
*.device5.numApps = 1
*.device5.app[0].typename = "EthernetSinkApp"
*.device5.app[0].io.interface = "eth0"
*.device5.app[0].io.localAddress = "01:00:00:00:00:00"

*.device6.numApps = 1
*.device6.app[0].typename = "EthernetSinkApp"
*.device6.app[0].io.interface = "eth0"
*.device6.app[0].io.localAddress = "01:00:00:00:00:00"

# configure VLAN ID filtering
*.*.bridging.vlanPolicy.typename = "VlanPolicyLayer"
*.switch1.bridging.vlanPolicy.inboundFilter.acceptedVlanIds = {"eth0" : [1]}
*.switch1.bridging.vlanPolicy.outboundFilter.acceptedVlanIds = {"eth3" : [1]}
*.switch2.bridging.vlanPolicy.inboundFilter.acceptedVlanIds = {"eth3" : [1]}
*.switch2.bridging.vlanPolicy.outboundFilter.acceptedVlanIds = {"eth1" : [1], "eth2" : [1]}

# enable Ethernet cut-through switching in all Ethernet switches nodes
# TODO: this should only be set on Ethernet switches and hosts should just work
# TODO: create a pair of transmitter/receiver modules which can communicate with reception on start and optionally receiving a package update using local timer messages
*.*.hasCutthroughSwitching = true

# configure processing delay for ingress/egress traffic in Ethernet bridging layers
*.*.bridging.processingDelayLayer.typename = "ProcessingDelayLayer"
*.*.bridging.processingDelayLayer.ingress.typename = "PacketDelayer"
*.*.bridging.processingDelayLayer.ingress.delay = uniform(0us, 2us)
*.*.bridging.processingDelayLayer.egress.typename = "PacketDelayer"
*.*.bridging.processingDelayLayer.egress.delay = uniform(0us, 2us)

# configure configure processing delay for forwarded traffic in Ethernet bridging layers
*.*.bridging.directionReverser.delayer.typename = "PacketDelayer"
*.*.bridging.directionReverser.delayer.delay = uniform(0us, 2us)

# configure processing delay for ingress/egress traffic in Ethernet network interfaces
*.*.eth[*].processingDelayLayer.typename = "ProcessingDelayLayer"
*.*.eth[*].processingDelayLayer.ingress.typename = "PacketDelayer"
*.*.eth[*].processingDelayLayer.ingress.delay = uniform(0us, 2us)
*.*.eth[*].processingDelayLayer.egress.typename = "PacketDelayer"
*.*.eth[*].processingDelayLayer.egress.delay = uniform(0us, 2us)
